/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiCallback;
import com.mydatamyconsent.ApiClient;
import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.ApiResponse;
import com.mydatamyconsent.Configuration;
import com.mydatamyconsent.Pair;
import com.mydatamyconsent.ProgressRequestBody;
import com.mydatamyconsent.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mydatamyconsent.model.DataConsent;
import com.mydatamyconsent.model.DataConsentFinancialsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.FinancialAccount;
import com.mydatamyconsent.model.IndividualDataConsent;
import com.mydatamyconsent.model.IndividualDataConsentDetailsPaginatedList;
import com.mydatamyconsent.model.IndividualDataConsentDocument;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OneOfDataConsentIndividualDataConsentOrganizationDataConsent;
import com.mydatamyconsent.model.OrganizationDataConsent;
import com.mydatamyconsent.model.OrganizationDataConsentDetailsPaginatedList;
import com.mydatamyconsent.model.OrganizationDataConsentDocument;
import com.mydatamyconsent.model.OrganizationFinancialAccountDto;
import com.mydatamyconsent.model.OrganizationFinancialTransactionsDtoPaginatedList;
import java.util.UUID;
import com.mydatamyconsent.model.UserAccountFinancialTransactionsDtoPaginatedList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataConsentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataConsentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataConsentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadConsentedDocumentAnalysis
     * @param consentId Data consent id. (required)
     * @param documentId Consented document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadConsentedDocumentAnalysisCall(String consentId, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/{consentId}/documents/{documentId}/analysis"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadConsentedDocumentAnalysisValidateBeforeCall(String consentId, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling downloadConsentedDocumentAnalysis(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadConsentedDocumentAnalysis(Async)");
        }
        

        okhttp3.Call localVarCall = downloadConsentedDocumentAnalysisCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get analysis of a consented document.
     * 
     * @param consentId Data consent id. (required)
     * @param documentId Consented document Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void downloadConsentedDocumentAnalysis(String consentId, String documentId) throws ApiException {
        downloadConsentedDocumentAnalysisWithHttpInfo(consentId, documentId);
    }

    /**
     * Get analysis of a consented document.
     * 
     * @param consentId Data consent id. (required)
     * @param documentId Consented document Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadConsentedDocumentAnalysisWithHttpInfo(String consentId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadConsentedDocumentAnalysisValidateBeforeCall(consentId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get analysis of a consented document. (asynchronously)
     * 
     * @param consentId Data consent id. (required)
     * @param documentId Consented document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadConsentedDocumentAnalysisAsync(String consentId, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadConsentedDocumentAnalysisValidateBeforeCall(consentId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadIndividualConsentedDocumentById
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadIndividualConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents/{documentId}/download"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadIndividualConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling downloadIndividualConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadIndividualConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = downloadIndividualConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Download individual consented document by document id.
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void downloadIndividualConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        downloadIndividualConsentedDocumentByIdWithHttpInfo(consentId, documentId);
    }

    /**
     * Download individual consented document by document id.
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadIndividualConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadIndividualConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download individual consented document by document id. (asynchronously)
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadIndividualConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadIndividualConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadOrganizationConsentedDocumentById
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadOrganizationConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents/{documentId}/download"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadOrganizationConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling downloadOrganizationConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadOrganizationConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = downloadOrganizationConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Download organization consent document based on document id.
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void downloadOrganizationConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        downloadOrganizationConsentedDocumentByIdWithHttpInfo(consentId, documentId);
    }

    /**
     * Download organization consent document based on document id.
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> downloadOrganizationConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download organization consent document based on document id. (asynchronously)
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadOrganizationConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllConsentedFinancialAccounts
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedFinancialAccountsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/financial-accounts"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConsentedFinancialAccountsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getAllConsentedFinancialAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all individual consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentFinancialsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentFinancialsDto getAllConsentedFinancialAccounts(UUID consentId) throws ApiException {
        ApiResponse<DataConsentFinancialsDto> localVarResp = getAllConsentedFinancialAccountsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all individual consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentFinancialsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentFinancialsDto> getAllConsentedFinancialAccountsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all individual consented financial accounts. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedFinancialAccountsAsync(UUID consentId, final ApiCallback<DataConsentFinancialsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentFinancialAccounts
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentFinancialAccountsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/financial-accounts"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentFinancialAccountsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentFinancialAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentFinancialAccountsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all organizational consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentFinancialsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentFinancialsDto getConsentFinancialAccounts(UUID consentId) throws ApiException {
        ApiResponse<DataConsentFinancialsDto> localVarResp = getConsentFinancialAccountsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all organizational consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentFinancialsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentFinancialsDto> getConsentFinancialAccountsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getConsentFinancialAccountsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all organizational consented financial accounts. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentFinancialAccountsAsync(UUID consentId, final ApiCallback<DataConsentFinancialsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentFinancialAccountsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedAccountById
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedAccountByIdCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/financial-accounts/{accountId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedAccountByIdValidateBeforeCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedAccountById(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedAccountById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedAccountByIdCall(consentId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return FinancialAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public FinancialAccount getConsentedAccountById(UUID consentId, UUID accountId) throws ApiException {
        ApiResponse<FinancialAccount> localVarResp = getConsentedAccountByIdWithHttpInfo(consentId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get individual consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return ApiResponse&lt;FinancialAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinancialAccount> getConsentedAccountByIdWithHttpInfo(UUID consentId, UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedAccountByIdValidateBeforeCall(consentId, accountId, null);
        Type localVarReturnType = new TypeToken<FinancialAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented financial account details based on account id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedAccountByIdAsync(UUID consentId, UUID accountId, final ApiCallback<FinancialAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedAccountByIdValidateBeforeCall(consentId, accountId, _callback);
        Type localVarReturnType = new TypeToken<FinancialAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedDocumentById
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents/{documentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented document by document id.
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @return IndividualDataConsentDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public IndividualDataConsentDocument getConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<IndividualDataConsentDocument> localVarResp = getConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Get individual consented document by document id.
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @return ApiResponse&lt;IndividualDataConsentDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndividualDataConsentDocument> getConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<IndividualDataConsentDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented document by document id. (asynchronously)
     * 
     * @param consentId Individual data consent id. (required)
     * @param documentId Consented document id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<IndividualDataConsentDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<IndividualDataConsentDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedFinancialAccount
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/financial-accounts/{accountId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedFinancialAccountValidateBeforeCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedFinancialAccount(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedFinancialAccount(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedFinancialAccountCall(consentId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get organization consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return OrganizationFinancialAccountDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationFinancialAccountDto getConsentedFinancialAccount(UUID consentId, UUID accountId) throws ApiException {
        ApiResponse<OrganizationFinancialAccountDto> localVarResp = getConsentedFinancialAccountWithHttpInfo(consentId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get organization consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return ApiResponse&lt;OrganizationFinancialAccountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationFinancialAccountDto> getConsentedFinancialAccountWithHttpInfo(UUID consentId, UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedFinancialAccountValidateBeforeCall(consentId, accountId, null);
        Type localVarReturnType = new TypeToken<OrganizationFinancialAccountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consented financial account details based on account id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountAsync(UUID consentId, UUID accountId, final ApiCallback<OrganizationFinancialAccountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedFinancialAccountValidateBeforeCall(consentId, accountId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationFinancialAccountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedFinancialAccountInsights
     * @param consentId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountInsightsCall(String consentId, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/{consentId}/financial-accounts/{accountId}/insights"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedFinancialAccountInsightsValidateBeforeCall(String consentId, String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedFinancialAccountInsights(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedFinancialAccountInsights(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedFinancialAccountInsightsCall(consentId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get consented financial account insights.
     * 
     * @param consentId  (required)
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void getConsentedFinancialAccountInsights(String consentId, String accountId) throws ApiException {
        getConsentedFinancialAccountInsightsWithHttpInfo(consentId, accountId);
    }

    /**
     * Get consented financial account insights.
     * 
     * @param consentId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getConsentedFinancialAccountInsightsWithHttpInfo(String consentId, String accountId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedFinancialAccountInsightsValidateBeforeCall(consentId, accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get consented financial account insights. (asynchronously)
     * 
     * @param consentId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountInsightsAsync(String consentId, String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedFinancialAccountInsightsValidateBeforeCall(consentId, accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedFinancialAccountTransactions
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountTransactionsCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/financial-accounts/{accountId}/transactions"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (fromDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTimeUtc", fromDateTimeUtc));
        }

        if (toDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTimeUtc", toDateTimeUtc));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedFinancialAccountTransactionsValidateBeforeCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedFinancialAccountTransactions(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedFinancialAccountTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return UserAccountFinancialTransactionsDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UserAccountFinancialTransactionsDtoPaginatedList getConsentedFinancialAccountTransactions(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> localVarResp = getConsentedFinancialAccountTransactionsWithHttpInfo(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;UserAccountFinancialTransactionsDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> getConsentedFinancialAccountTransactionsWithHttpInfo(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<UserAccountFinancialTransactionsDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountTransactionsAsync(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback<UserAccountFinancialTransactionsDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<UserAccountFinancialTransactionsDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsCall(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (fromDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTime", fromDateTime));
        }

        if (toDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTime", toDateTime));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentsValidateBeforeCall(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConsentsCall(status, fromDateTime, toDateTime, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get the paginated list of individual data consents.
     * GetIndividualDataConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return IndividualDataConsentDetailsPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public IndividualDataConsentDetailsPaginatedList getConsents(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<IndividualDataConsentDetailsPaginatedList> localVarResp = getConsentsWithHttpInfo(status, fromDateTime, toDateTime, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the paginated list of individual data consents.
     * GetIndividualDataConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;IndividualDataConsentDetailsPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndividualDataConsentDetailsPaginatedList> getConsentsWithHttpInfo(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConsentsValidateBeforeCall(status, fromDateTime, toDateTime, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<IndividualDataConsentDetailsPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the paginated list of individual data consents. (asynchronously)
     * GetIndividualDataConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsAsync(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback<IndividualDataConsentDetailsPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentsValidateBeforeCall(status, fromDateTime, toDateTime, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<IndividualDataConsentDetailsPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIndividualConsentedDocuments
     * @param consentId Individual data consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualConsentedDocumentsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndividualConsentedDocumentsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getIndividualConsentedDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getIndividualConsentedDocumentsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented documents by consent id.
     * 
     * @param consentId Individual data consent id. (required)
     * @return List&lt;IndividualDataConsentDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<IndividualDataConsentDocument> getIndividualConsentedDocuments(UUID consentId) throws ApiException {
        ApiResponse<List<IndividualDataConsentDocument>> localVarResp = getIndividualConsentedDocumentsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get individual consented documents by consent id.
     * 
     * @param consentId Individual data consent id. (required)
     * @return ApiResponse&lt;List&lt;IndividualDataConsentDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IndividualDataConsentDocument>> getIndividualConsentedDocumentsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getIndividualConsentedDocumentsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<List<IndividualDataConsentDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented documents by consent id. (asynchronously)
     * 
     * @param consentId Individual data consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualConsentedDocumentsAsync(UUID consentId, final ApiCallback<List<IndividualDataConsentDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndividualConsentedDocumentsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<List<IndividualDataConsentDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIndividualDataConsentById
     * @param consentId Individual data consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualDataConsentByIdCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIndividualDataConsentByIdValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getIndividualDataConsentById(Async)");
        }
        

        okhttp3.Call localVarCall = getIndividualDataConsentByIdCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get individuals data consent details by consent id.
     * 
     * @param consentId Individual data consent id. (required)
     * @return OneOfDataConsentIndividualDataConsentOrganizationDataConsent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OneOfDataConsentIndividualDataConsentOrganizationDataConsent getIndividualDataConsentById(UUID consentId) throws ApiException {
        ApiResponse<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> localVarResp = getIndividualDataConsentByIdWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get individuals data consent details by consent id.
     * 
     * @param consentId Individual data consent id. (required)
     * @return ApiResponse&lt;OneOfDataConsentIndividualDataConsentOrganizationDataConsent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> getIndividualDataConsentByIdWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getIndividualDataConsentByIdValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<OneOfDataConsentIndividualDataConsentOrganizationDataConsent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individuals data consent details by consent id. (asynchronously)
     * 
     * @param consentId Individual data consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIndividualDataConsentByIdAsync(UUID consentId, final ApiCallback<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIndividualDataConsentByIdValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<OneOfDataConsentIndividualDataConsentOrganizationDataConsent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrgConsentedAccountTransactions
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgConsentedAccountTransactionsCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/financial-accounts/{accountId}/transactions"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (fromDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTimeUtc", fromDateTimeUtc));
        }

        if (toDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTimeUtc", toDateTimeUtc));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgConsentedAccountTransactionsValidateBeforeCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrgConsentedAccountTransactions(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrgConsentedAccountTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return OrganizationFinancialTransactionsDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationFinancialTransactionsDtoPaginatedList getOrgConsentedAccountTransactions(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> localVarResp = getOrgConsentedAccountTransactionsWithHttpInfo(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;OrganizationFinancialTransactionsDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> getOrgConsentedAccountTransactionsWithHttpInfo(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<OrganizationFinancialTransactionsDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgConsentedAccountTransactionsAsync(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback<OrganizationFinancialTransactionsDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<OrganizationFinancialTransactionsDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConsentedDocumentById
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents/{documentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrganizationConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getOrganizationConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get organization consent document based on document id.
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @return OrganizationDataConsentDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDataConsentDocument getOrganizationConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<OrganizationDataConsentDocument> localVarResp = getOrganizationConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Get organization consent document based on document id.
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @return ApiResponse&lt;OrganizationDataConsentDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDataConsentDocument> getOrganizationConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consent document based on document id. (asynchronously)
     * 
     * @param consentId Organization data consent id. (required)
     * @param documentId Organization consented document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<OrganizationDataConsentDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConsentedDocuments
     * @param consentId Organization data consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConsentedDocumentsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrganizationConsentedDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get organization consented documents by consent id.
     * 
     * @param consentId Organization data consent id. (required)
     * @return List&lt;OrganizationDataConsentDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationDataConsentDocument> getOrganizationConsentedDocuments(UUID consentId) throws ApiException {
        ApiResponse<List<OrganizationDataConsentDocument>> localVarResp = getOrganizationConsentedDocumentsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get organization consented documents by consent id.
     * 
     * @param consentId Organization data consent id. (required)
     * @return ApiResponse&lt;List&lt;OrganizationDataConsentDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationDataConsentDocument>> getOrganizationConsentedDocumentsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConsentedDocumentsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<List<OrganizationDataConsentDocument>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consented documents by consent id. (asynchronously)
     * 
     * @param consentId Organization data consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentsAsync(UUID consentId, final ApiCallback<List<OrganizationDataConsentDocument>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<List<OrganizationDataConsentDocument>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDataConsentById
     * @param consentId Organization data consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDataConsentByIdCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDataConsentByIdValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrganizationDataConsentById(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationDataConsentByIdCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get organizations data consent details by consent id.
     * 
     * @param consentId Organization data consent id. (required)
     * @return OneOfDataConsentIndividualDataConsentOrganizationDataConsent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OneOfDataConsentIndividualDataConsentOrganizationDataConsent getOrganizationDataConsentById(UUID consentId) throws ApiException {
        ApiResponse<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> localVarResp = getOrganizationDataConsentByIdWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get organizations data consent details by consent id.
     * 
     * @param consentId Organization data consent id. (required)
     * @return ApiResponse&lt;OneOfDataConsentIndividualDataConsentOrganizationDataConsent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> getOrganizationDataConsentByIdWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDataConsentByIdValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<OneOfDataConsentIndividualDataConsentOrganizationDataConsent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organizations data consent details by consent id. (asynchronously)
     * 
     * @param consentId Organization data consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDataConsentByIdAsync(UUID consentId, final ApiCallback<OneOfDataConsentIndividualDataConsentOrganizationDataConsent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDataConsentByIdValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<OneOfDataConsentIndividualDataConsentOrganizationDataConsent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationDataConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDataConsentsCall(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (fromDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTime", fromDateTime));
        }

        if (toDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTime", toDateTime));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationDataConsentsValidateBeforeCall(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOrganizationDataConsentsCall(status, fromDateTime, toDateTime, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get the paginated list of organization data consents.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return OrganizationDataConsentDetailsPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDataConsentDetailsPaginatedList getOrganizationDataConsents(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<OrganizationDataConsentDetailsPaginatedList> localVarResp = getOrganizationDataConsentsWithHttpInfo(status, fromDateTime, toDateTime, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the paginated list of organization data consents.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;OrganizationDataConsentDetailsPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDataConsentDetailsPaginatedList> getOrganizationDataConsentsWithHttpInfo(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationDataConsentsValidateBeforeCall(status, fromDateTime, toDateTime, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentDetailsPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the paginated list of organization data consents. (asynchronously)
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param fromDateTime From datetime in UTC timezone. (optional)
     * @param toDateTime To datetime in UTC timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationDataConsentsAsync(DataConsentStatus status, OffsetDateTime fromDateTime, OffsetDateTime toDateTime, Integer pageNo, Integer pageSize, final ApiCallback<OrganizationDataConsentDetailsPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationDataConsentsValidateBeforeCall(status, fromDateTime, toDateTime, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentDetailsPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
