/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiCallback;
import com.mydatamyconsent.ApiClient;
import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.ApiResponse;
import com.mydatamyconsent.Configuration;
import com.mydatamyconsent.Pair;
import com.mydatamyconsent.ProgressRequestBody;
import com.mydatamyconsent.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mydatamyconsent.model.DataConsentDetailsDto;
import com.mydatamyconsent.model.DataConsentDocumentsDto;
import com.mydatamyconsent.model.DataConsentFinancialsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.FinancialAccount;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OrganizationDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.OrganizationDocumentDetailsDto;
import com.mydatamyconsent.model.OrganizationDocumentDownloadDto;
import com.mydatamyconsent.model.OrganizationFinancialAccountDto;
import com.mydatamyconsent.model.OrganizationFinancialTransactionsDtoPaginatedList;
import com.mydatamyconsent.model.ProblemDetails;
import java.util.UUID;
import com.mydatamyconsent.model.UserAccountFinancialTransactionsDtoPaginatedList;
import com.mydatamyconsent.model.UserDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.UserDocumentDetailsDto;
import com.mydatamyconsent.model.UserDocumentDownloadDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataConsentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataConsentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataConsentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadConsentedDocumentById
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents/{documentId}/download"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling downloadConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = downloadConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Download a individuals consented document.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @return UserDocumentDownloadDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDocumentDownloadDto downloadConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<UserDocumentDownloadDto> localVarResp = downloadConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Download a individuals consented document.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @return ApiResponse&lt;UserDocumentDownloadDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDocumentDownloadDto> downloadConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<UserDocumentDownloadDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a individuals consented document. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<UserDocumentDownloadDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<UserDocumentDownloadDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadOrgConsentedDocumentById
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadOrgConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents/{documentId}/download"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadOrgConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling downloadOrgConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadOrgConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = downloadOrgConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Download a organizations consented document.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @return OrganizationDocumentDownloadDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDocumentDownloadDto downloadOrgConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<OrganizationDocumentDownloadDto> localVarResp = downloadOrgConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Download a organizations consented document.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @return ApiResponse&lt;OrganizationDocumentDownloadDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDocumentDownloadDto> downloadOrgConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadOrgConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<OrganizationDocumentDownloadDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a organizations consented document. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadOrgConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<OrganizationDocumentDownloadDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadOrgConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDocumentDownloadDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllConsentedDocuments
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedDocumentsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConsentedDocumentsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getAllConsentedDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getAllConsentedDocumentsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get the individual documents based on ConsentId.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentDocumentsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentDocumentsDto getAllConsentedDocuments(UUID consentId) throws ApiException {
        ApiResponse<DataConsentDocumentsDto> localVarResp = getAllConsentedDocumentsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get the individual documents based on ConsentId.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentDocumentsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentDocumentsDto> getAllConsentedDocumentsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getAllConsentedDocumentsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentDocumentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the individual documents based on ConsentId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedDocumentsAsync(UUID consentId, final ApiCallback<DataConsentDocumentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConsentedDocumentsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentDocumentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllConsentedFinancialAccounts
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedFinancialAccountsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/accounts"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConsentedFinancialAccountsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getAllConsentedFinancialAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all individual consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentFinancialsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentFinancialsDto getAllConsentedFinancialAccounts(UUID consentId) throws ApiException {
        ApiResponse<DataConsentFinancialsDto> localVarResp = getAllConsentedFinancialAccountsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all individual consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentFinancialsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentFinancialsDto> getAllConsentedFinancialAccountsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all individual consented financial accounts. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllConsentedFinancialAccountsAsync(UUID consentId, final ApiCallback<DataConsentFinancialsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConsentedFinancialAccountsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOrganizationConsentedAccounts
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrganizationConsentedAccountsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/accounts"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOrganizationConsentedAccountsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getAllOrganizationConsentedAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAllOrganizationConsentedAccountsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all organizational consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentFinancialsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentFinancialsDto getAllOrganizationConsentedAccounts(UUID consentId) throws ApiException {
        ApiResponse<DataConsentFinancialsDto> localVarResp = getAllOrganizationConsentedAccountsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all organizational consented financial accounts.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentFinancialsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentFinancialsDto> getAllOrganizationConsentedAccountsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getAllOrganizationConsentedAccountsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all organizational consented financial accounts. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrganizationConsentedAccountsAsync(UUID consentId, final ApiCallback<DataConsentFinancialsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOrganizationConsentedAccountsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentFinancialsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllOrganizationConsentedDocuments
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrganizationConsentedDocumentsCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllOrganizationConsentedDocumentsValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getAllOrganizationConsentedDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getAllOrganizationConsentedDocumentsCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get the organization documents based on ConsentId.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentDocumentsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentDocumentsDto getAllOrganizationConsentedDocuments(UUID consentId) throws ApiException {
        ApiResponse<DataConsentDocumentsDto> localVarResp = getAllOrganizationConsentedDocumentsWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get the organization documents based on ConsentId.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentDocumentsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentDocumentsDto> getAllOrganizationConsentedDocumentsWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getAllOrganizationConsentedDocumentsValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentDocumentsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the organization documents based on ConsentId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllOrganizationConsentedDocumentsAsync(UUID consentId, final ApiCallback<DataConsentDocumentsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllOrganizationConsentedDocumentsValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentDocumentsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentDetailsById
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentDetailsByIdCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentDetailsByIdValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentDetailsById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentDetailsByIdCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all individuals consent details by consent id.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentDetailsDto getConsentDetailsById(UUID consentId) throws ApiException {
        ApiResponse<DataConsentDetailsDto> localVarResp = getConsentDetailsByIdWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all individuals consent details by consent id.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentDetailsDto> getConsentDetailsByIdWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getConsentDetailsByIdValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all individuals consent details by consent id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentDetailsByIdAsync(UUID consentId, final ApiCallback<DataConsentDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentDetailsByIdValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedAccountById
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedAccountByIdCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/accounts/{accountId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedAccountByIdValidateBeforeCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedAccountById(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedAccountById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedAccountByIdCall(consentId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return FinancialAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public FinancialAccount getConsentedAccountById(UUID consentId, UUID accountId) throws ApiException {
        ApiResponse<FinancialAccount> localVarResp = getConsentedAccountByIdWithHttpInfo(consentId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get individual consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return ApiResponse&lt;FinancialAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FinancialAccount> getConsentedAccountByIdWithHttpInfo(UUID consentId, UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedAccountByIdValidateBeforeCall(consentId, accountId, null);
        Type localVarReturnType = new TypeToken<FinancialAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented financial account details based on account id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedAccountByIdAsync(UUID consentId, UUID accountId, final ApiCallback<FinancialAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedAccountByIdValidateBeforeCall(consentId, accountId, _callback);
        Type localVarReturnType = new TypeToken<FinancialAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedDocumentById
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/documents/{documentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get individuals consent document based on document id.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @return UserDocumentDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDocumentDetailsDto getConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<UserDocumentDetailsDto> localVarResp = getConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Get individuals consent document based on document id.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @return ApiResponse&lt;UserDocumentDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDocumentDetailsDto> getConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<UserDocumentDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individuals consent document based on document id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<UserDocumentDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<UserDocumentDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedFinancialAccount
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/accounts/{accountId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedFinancialAccountValidateBeforeCall(UUID consentId, UUID accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedFinancialAccount(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedFinancialAccount(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedFinancialAccountCall(consentId, accountId, _callback);
        return localVarCall;

    }

    /**
     * Get organization consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return OrganizationFinancialAccountDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationFinancialAccountDto getConsentedFinancialAccount(UUID consentId, UUID accountId) throws ApiException {
        ApiResponse<OrganizationFinancialAccountDto> localVarResp = getConsentedFinancialAccountWithHttpInfo(consentId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get organization consented financial account details based on account id.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @return ApiResponse&lt;OrganizationFinancialAccountDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationFinancialAccountDto> getConsentedFinancialAccountWithHttpInfo(UUID consentId, UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = getConsentedFinancialAccountValidateBeforeCall(consentId, accountId, null);
        Type localVarReturnType = new TypeToken<OrganizationFinancialAccountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consented financial account details based on account id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountAsync(UUID consentId, UUID accountId, final ApiCallback<OrganizationFinancialAccountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedFinancialAccountValidateBeforeCall(consentId, accountId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationFinancialAccountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentedFinancialAccountTransactions
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountTransactionsCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals/{consentId}/accounts/{accountId}/transactions"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (fromDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTimeUtc", fromDateTimeUtc));
        }

        if (toDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTimeUtc", toDateTimeUtc));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentedFinancialAccountTransactionsValidateBeforeCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentedFinancialAccountTransactions(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getConsentedFinancialAccountTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return UserAccountFinancialTransactionsDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserAccountFinancialTransactionsDtoPaginatedList getConsentedFinancialAccountTransactions(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> localVarResp = getConsentedFinancialAccountTransactionsWithHttpInfo(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;UserAccountFinancialTransactionsDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccountFinancialTransactionsDtoPaginatedList> getConsentedFinancialAccountTransactionsWithHttpInfo(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<UserAccountFinancialTransactionsDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual consented financial account transactions of an individual based on accountId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 10)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentedFinancialAccountTransactionsAsync(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback<UserAccountFinancialTransactionsDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentedFinancialAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<UserAccountFinancialTransactionsDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsents
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsCall(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/individuals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentsValidateBeforeCall(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConsentsCall(status, from, to, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get the list of Consents Sent to Individuals.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return UserDataConsentInfoDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDataConsentInfoDtoPaginatedList getConsents(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<UserDataConsentInfoDtoPaginatedList> localVarResp = getConsentsWithHttpInfo(status, from, to, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the list of Consents Sent to Individuals.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;UserDataConsentInfoDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDataConsentInfoDtoPaginatedList> getConsentsWithHttpInfo(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConsentsValidateBeforeCall(status, from, to, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<UserDataConsentInfoDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of Consents Sent to Individuals. (asynchronously)
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsAsync(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback<UserDataConsentInfoDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentsValidateBeforeCall(status, from, to, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<UserDataConsentInfoDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentsForOrganizations
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsForOrganizationsCall(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentsForOrganizationsValidateBeforeCall(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConsentsForOrganizationsCall(status, from, to, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get the list of data consents sent for organizations.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return OrganizationDataConsentInfoDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDataConsentInfoDtoPaginatedList getConsentsForOrganizations(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> localVarResp = getConsentsForOrganizationsWithHttpInfo(status, from, to, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get the list of data consents sent for organizations.
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;OrganizationDataConsentInfoDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDataConsentInfoDtoPaginatedList> getConsentsForOrganizationsWithHttpInfo(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConsentsForOrganizationsValidateBeforeCall(status, from, to, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentInfoDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of data consents sent for organizations. (asynchronously)
     * 
     * @param status Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     * @param from From date time in utc timezone. (optional)
     * @param to Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentsForOrganizationsAsync(DataConsentStatus status, OffsetDateTime from, OffsetDateTime to, Integer pageNo, Integer pageSize, final ApiCallback<OrganizationDataConsentInfoDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentsForOrganizationsValidateBeforeCall(status, from, to, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDataConsentInfoDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrgConsentedAccountTransactions
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgConsentedAccountTransactionsCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/accounts/{accountId}/transactions"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (fromDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDateTimeUtc", fromDateTimeUtc));
        }

        if (toDateTimeUtc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDateTimeUtc", toDateTimeUtc));
        }

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgConsentedAccountTransactionsValidateBeforeCall(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrgConsentedAccountTransactions(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getOrgConsentedAccountTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return OrganizationFinancialTransactionsDtoPaginatedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationFinancialTransactionsDtoPaginatedList getOrgConsentedAccountTransactions(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> localVarResp = getOrgConsentedAccountTransactionsWithHttpInfo(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @return ApiResponse&lt;OrganizationFinancialTransactionsDtoPaginatedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationFinancialTransactionsDtoPaginatedList> getOrgConsentedAccountTransactionsWithHttpInfo(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, null);
        Type localVarReturnType = new TypeToken<OrganizationFinancialTransactionsDtoPaginatedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consented financial account transactions of an individual based on accountId. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param accountId Account id. (required)
     * @param filters Filters. (optional)
     * @param fromDateTimeUtc From date time in utc timezone. (optional)
     * @param toDateTimeUtc Til date time in utc timezone. (optional)
     * @param pageNo Page number. (optional, default to 1)
     * @param pageSize Number of items to return. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgConsentedAccountTransactionsAsync(UUID consentId, UUID accountId, String filters, OffsetDateTime fromDateTimeUtc, OffsetDateTime toDateTimeUtc, Integer pageNo, Integer pageSize, final ApiCallback<OrganizationFinancialTransactionsDtoPaginatedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgConsentedAccountTransactionsValidateBeforeCall(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize, _callback);
        Type localVarReturnType = new TypeToken<OrganizationFinancialTransactionsDtoPaginatedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConsentDetailsById
     * @param consentId Consent id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentDetailsByIdCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConsentDetailsByIdValidateBeforeCall(UUID consentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrganizationConsentDetailsById(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationConsentDetailsByIdCall(consentId, _callback);
        return localVarCall;

    }

    /**
     * Get all organization consent details by consent id.
     * 
     * @param consentId Consent id. (required)
     * @return DataConsentDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DataConsentDetailsDto getOrganizationConsentDetailsById(UUID consentId) throws ApiException {
        ApiResponse<DataConsentDetailsDto> localVarResp = getOrganizationConsentDetailsByIdWithHttpInfo(consentId);
        return localVarResp.getData();
    }

    /**
     * Get all organization consent details by consent id.
     * 
     * @param consentId Consent id. (required)
     * @return ApiResponse&lt;DataConsentDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataConsentDetailsDto> getOrganizationConsentDetailsByIdWithHttpInfo(UUID consentId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConsentDetailsByIdValidateBeforeCall(consentId, null);
        Type localVarReturnType = new TypeToken<DataConsentDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all organization consent details by consent id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentDetailsByIdAsync(UUID consentId, final ApiCallback<DataConsentDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConsentDetailsByIdValidateBeforeCall(consentId, _callback);
        Type localVarReturnType = new TypeToken<DataConsentDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationConsentedDocumentById
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentByIdCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/organizations/{consentId}/documents/{documentId}"
            .replaceAll("\\{" + "consentId" + "\\}", localVarApiClient.escapeString(consentId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationConsentedDocumentByIdValidateBeforeCall(UUID consentId, UUID documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getOrganizationConsentedDocumentById(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getOrganizationConsentedDocumentById(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdCall(consentId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get organization consent document based on document id.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @return OrganizationDocumentDetailsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDocumentDetailsDto getOrganizationConsentedDocumentById(UUID consentId, UUID documentId) throws ApiException {
        ApiResponse<OrganizationDocumentDetailsDto> localVarResp = getOrganizationConsentedDocumentByIdWithHttpInfo(consentId, documentId);
        return localVarResp.getData();
    }

    /**
     * Get organization consent document based on document id.
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @return ApiResponse&lt;OrganizationDocumentDetailsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDocumentDetailsDto> getOrganizationConsentedDocumentByIdWithHttpInfo(UUID consentId, UUID documentId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, null);
        Type localVarReturnType = new TypeToken<OrganizationDocumentDetailsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization consent document based on document id. (asynchronously)
     * 
     * @param consentId Consent id. (required)
     * @param documentId Document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganizationConsentedDocumentByIdAsync(UUID consentId, UUID documentId, final ApiCallback<OrganizationDocumentDetailsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationConsentedDocumentByIdValidateBeforeCall(consentId, documentId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDocumentDetailsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
