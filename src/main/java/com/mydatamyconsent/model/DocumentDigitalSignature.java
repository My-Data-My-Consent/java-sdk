/*
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mydatamyconsent.JSON;

/**
 * DocumentDigitalSignature : Document digital signature.
 */
@ApiModel(description = "DocumentDigitalSignature : Document digital signature.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-29T10:32:51.547806794Z[Etc/UTC]")
public class DocumentDigitalSignature {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ISSUED_BY = "issued_by";
  @SerializedName(SERIALIZED_NAME_ISSUED_BY)
  private String issuedBy;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuer_name";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_VALID_FROM_UTC = "valid_from_utc";
  @SerializedName(SERIALIZED_NAME_VALID_FROM_UTC)
  private String validFromUtc;

  public static final String SERIALIZED_NAME_VALID_TO_UTC = "valid_to_utc";
  @SerializedName(SERIALIZED_NAME_VALID_TO_UTC)
  private String validToUtc;

  public DocumentDigitalSignature() {
  }

  public DocumentDigitalSignature name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DocumentDigitalSignature issuedBy(String issuedBy) {
    
    this.issuedBy = issuedBy;
    return this;
  }

   /**
   * Signature issued by.
   * @return issuedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Signature issued by.")

  public String getIssuedBy() {
    return issuedBy;
  }


  public void setIssuedBy(String issuedBy) {
    this.issuedBy = issuedBy;
  }


  public DocumentDigitalSignature issuerName(String issuerName) {
    
    this.issuerName = issuerName;
    return this;
  }

   /**
   * Signature issuer name.
   * @return issuerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Signature issuer name.")

  public String getIssuerName() {
    return issuerName;
  }


  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  public DocumentDigitalSignature validFromUtc(String validFromUtc) {
    
    this.validFromUtc = validFromUtc;
    return this;
  }

   /**
   * Signature valid from datatime in UTC timezone.
   * @return validFromUtc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Signature valid from datatime in UTC timezone.")

  public String getValidFromUtc() {
    return validFromUtc;
  }


  public void setValidFromUtc(String validFromUtc) {
    this.validFromUtc = validFromUtc;
  }


  public DocumentDigitalSignature validToUtc(String validToUtc) {
    
    this.validToUtc = validToUtc;
    return this;
  }

   /**
   * Signature valid to datatime in UTC timezone.
   * @return validToUtc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Signature valid to datatime in UTC timezone.")

  public String getValidToUtc() {
    return validToUtc;
  }


  public void setValidToUtc(String validToUtc) {
    this.validToUtc = validToUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDigitalSignature documentDigitalSignature = (DocumentDigitalSignature) o;
    return Objects.equals(this.name, documentDigitalSignature.name) &&
        Objects.equals(this.issuedBy, documentDigitalSignature.issuedBy) &&
        Objects.equals(this.issuerName, documentDigitalSignature.issuerName) &&
        Objects.equals(this.validFromUtc, documentDigitalSignature.validFromUtc) &&
        Objects.equals(this.validToUtc, documentDigitalSignature.validToUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, issuedBy, issuerName, validFromUtc, validToUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDigitalSignature {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    issuedBy: ").append(toIndentedString(issuedBy)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    validFromUtc: ").append(toIndentedString(validFromUtc)).append("\n");
    sb.append("    validToUtc: ").append(toIndentedString(validToUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("issued_by");
    openapiFields.add("issuer_name");
    openapiFields.add("valid_from_utc");
    openapiFields.add("valid_to_utc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("issued_by");
    openapiRequiredFields.add("issuer_name");
    openapiRequiredFields.add("valid_from_utc");
    openapiRequiredFields.add("valid_to_utc");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentDigitalSignature
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DocumentDigitalSignature.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentDigitalSignature is not found in the empty JSON string", DocumentDigitalSignature.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DocumentDigitalSignature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentDigitalSignature` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentDigitalSignature.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("issued_by") != null && !jsonObj.get("issued_by").isJsonNull()) && !jsonObj.get("issued_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issued_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issued_by").toString()));
      }
      if ((jsonObj.get("issuer_name") != null && !jsonObj.get("issuer_name").isJsonNull()) && !jsonObj.get("issuer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_name").toString()));
      }
      if ((jsonObj.get("valid_from_utc") != null && !jsonObj.get("valid_from_utc").isJsonNull()) && !jsonObj.get("valid_from_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_from_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_from_utc").toString()));
      }
      if ((jsonObj.get("valid_to_utc") != null && !jsonObj.get("valid_to_utc").isJsonNull()) && !jsonObj.get("valid_to_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valid_to_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valid_to_utc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentDigitalSignature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentDigitalSignature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentDigitalSignature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentDigitalSignature.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentDigitalSignature>() {
           @Override
           public void write(JsonWriter out, DocumentDigitalSignature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentDigitalSignature read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentDigitalSignature given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentDigitalSignature
  * @throws IOException if the JSON string is invalid with respect to DocumentDigitalSignature
  */
  public static DocumentDigitalSignature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentDigitalSignature.class);
  }

 /**
  * Convert an instance of DocumentDigitalSignature to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

