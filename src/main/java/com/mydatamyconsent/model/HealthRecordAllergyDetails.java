/*
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.AllergyIntoleranceReaction;
import com.mydatamyconsent.model.CodeableConcept;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mydatamyconsent.JSON;

/**
 * HealthRecordAllergyDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T10:34:24.768905159Z[Etc/UTC]")
public class HealthRecordAllergyDetails {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private CodeableConcept name;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<String> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEVEL_STATUS = "level_status";
  @SerializedName(SERIALIZED_NAME_LEVEL_STATUS)
  private String levelStatus;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CodeableConcept status;

  public static final String SERIALIZED_NAME_CLINICAL_STATUS = "clinical_status";
  @SerializedName(SERIALIZED_NAME_CLINICAL_STATUS)
  private CodeableConcept clinicalStatus;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private List<AllergyIntoleranceReaction> reactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDED_AT_UTC = "recorded_at_utc";
  @SerializedName(SERIALIZED_NAME_RECORDED_AT_UTC)
  private OffsetDateTime recordedAtUtc;

  public HealthRecordAllergyDetails() {
  }

  public HealthRecordAllergyDetails type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Allergy", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public HealthRecordAllergyDetails id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public HealthRecordAllergyDetails name(CodeableConcept name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CodeableConcept getName() {
    return name;
  }


  public void setName(CodeableConcept name) {
    this.name = name;
  }


  public HealthRecordAllergyDetails category(List<String> category) {
    
    this.category = category;
    return this;
  }

  public HealthRecordAllergyDetails addCategoryItem(String categoryItem) {
    this.category.add(categoryItem);
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getCategory() {
    return category;
  }


  public void setCategory(List<String> category) {
    this.category = category;
  }


  public HealthRecordAllergyDetails levelStatus(String levelStatus) {
    
    this.levelStatus = levelStatus;
    return this;
  }

   /**
   * Get levelStatus
   * @return levelStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLevelStatus() {
    return levelStatus;
  }


  public void setLevelStatus(String levelStatus) {
    this.levelStatus = levelStatus;
  }


  public HealthRecordAllergyDetails status(CodeableConcept status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CodeableConcept getStatus() {
    return status;
  }


  public void setStatus(CodeableConcept status) {
    this.status = status;
  }


  public HealthRecordAllergyDetails clinicalStatus(CodeableConcept clinicalStatus) {
    
    this.clinicalStatus = clinicalStatus;
    return this;
  }

   /**
   * Get clinicalStatus
   * @return clinicalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CodeableConcept getClinicalStatus() {
    return clinicalStatus;
  }


  public void setClinicalStatus(CodeableConcept clinicalStatus) {
    this.clinicalStatus = clinicalStatus;
  }


  public HealthRecordAllergyDetails reactions(List<AllergyIntoleranceReaction> reactions) {
    
    this.reactions = reactions;
    return this;
  }

  public HealthRecordAllergyDetails addReactionsItem(AllergyIntoleranceReaction reactionsItem) {
    this.reactions.add(reactionsItem);
    return this;
  }

   /**
   * Get reactions
   * @return reactions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<AllergyIntoleranceReaction> getReactions() {
    return reactions;
  }


  public void setReactions(List<AllergyIntoleranceReaction> reactions) {
    this.reactions = reactions;
  }


  public HealthRecordAllergyDetails recordedAtUtc(OffsetDateTime recordedAtUtc) {
    
    this.recordedAtUtc = recordedAtUtc;
    return this;
  }

   /**
   * Get recordedAtUtc
   * @return recordedAtUtc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRecordedAtUtc() {
    return recordedAtUtc;
  }


  public void setRecordedAtUtc(OffsetDateTime recordedAtUtc) {
    this.recordedAtUtc = recordedAtUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthRecordAllergyDetails healthRecordAllergyDetails = (HealthRecordAllergyDetails) o;
    return Objects.equals(this.type, healthRecordAllergyDetails.type) &&
        Objects.equals(this.id, healthRecordAllergyDetails.id) &&
        Objects.equals(this.name, healthRecordAllergyDetails.name) &&
        Objects.equals(this.category, healthRecordAllergyDetails.category) &&
        Objects.equals(this.levelStatus, healthRecordAllergyDetails.levelStatus) &&
        Objects.equals(this.status, healthRecordAllergyDetails.status) &&
        Objects.equals(this.clinicalStatus, healthRecordAllergyDetails.clinicalStatus) &&
        Objects.equals(this.reactions, healthRecordAllergyDetails.reactions) &&
        Objects.equals(this.recordedAtUtc, healthRecordAllergyDetails.recordedAtUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, name, category, levelStatus, status, clinicalStatus, reactions, recordedAtUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthRecordAllergyDetails {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    levelStatus: ").append(toIndentedString(levelStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    clinicalStatus: ").append(toIndentedString(clinicalStatus)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    recordedAtUtc: ").append(toIndentedString(recordedAtUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("level_status");
    openapiFields.add("status");
    openapiFields.add("clinical_status");
    openapiFields.add("reactions");
    openapiFields.add("recorded_at_utc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("reactions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HealthRecordAllergyDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (HealthRecordAllergyDetails.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthRecordAllergyDetails is not found in the empty JSON string", HealthRecordAllergyDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HealthRecordAllergyDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthRecordAllergyDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HealthRecordAllergyDetails.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        CodeableConcept.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("level_status") != null && !jsonObj.get("level_status").isJsonNull()) && !jsonObj.get("level_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level_status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CodeableConcept.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
      // validate the optional field `clinical_status`
      if (jsonObj.get("clinical_status") != null && !jsonObj.get("clinical_status").isJsonNull()) {
        CodeableConcept.validateJsonObject(jsonObj.getAsJsonObject("clinical_status"));
      }
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull()) {
        JsonArray jsonArrayreactions = jsonObj.getAsJsonArray("reactions");
        if (jsonArrayreactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reactions` to be an array in the JSON string but got `%s`", jsonObj.get("reactions").toString()));
          }

          // validate the optional field `reactions` (array)
          for (int i = 0; i < jsonArrayreactions.size(); i++) {
            AllergyIntoleranceReaction.validateJsonObject(jsonArrayreactions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthRecordAllergyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthRecordAllergyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthRecordAllergyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthRecordAllergyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthRecordAllergyDetails>() {
           @Override
           public void write(JsonWriter out, HealthRecordAllergyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthRecordAllergyDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HealthRecordAllergyDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HealthRecordAllergyDetails
  * @throws IOException if the JSON string is invalid with respect to HealthRecordAllergyDetails
  */
  public static HealthRecordAllergyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthRecordAllergyDetails.class);
  }

 /**
  * Convert an instance of HealthRecordAllergyDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

