/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DocumentIssueRequest;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.ProblemDetails;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsApi
 */
@Ignore
public class DocumentsApiTest {

    private final DocumentsApi api = new DocumentsApi();

    
    /**
     * Issue a new document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void issueDocumentTest() throws ApiException {
        DocumentIssueRequest documentIssueRequest = null;
        Boolean response = api.issueDocument(documentIssueRequest);

        // TODO: test validations
    }
    
    /**
     * Get issued document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1DocumentsIssuedDocumentIdGetTest() throws ApiException {
        UUID documentId = null;
        api.v1DocumentsIssuedDocumentIdGet(documentId);

        // TODO: test validations
    }
    
    /**
     * Get issued documents.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1DocumentsIssuedGetTest() throws ApiException {
        UUID documentTypeId = null;
        OffsetDateTime fromDateTime = null;
        OffsetDateTime toDateTime = null;
        Integer pageSize = null;
        Integer pageNo = null;
        api.v1DocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageSize, pageNo);

        // TODO: test validations
    }
    
    /**
     * Get registered document types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1DocumentsTypesGetTest() throws ApiException {
        Integer pageSize = null;
        Integer pageNo = null;
        api.v1DocumentsTypesGet(pageSize, pageNo);

        // TODO: test validations
    }
    
}
