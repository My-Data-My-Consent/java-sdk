/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DataConsentStatus;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.ProblemDetails;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentsApi
 */
@Ignore
public class DataConsentsApiTest {

    private final DataConsentsApi api = new DataConsentsApi();

    
    /**
     * Get consented financial account details.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdAccountsAccountIdGetTest() throws ApiException {
        String consentId = null;
        String accountId = null;
        Object response = api.v1ConsentsConsentIdAccountsAccountIdGet(consentId, accountId);

        // TODO: test validations
    }
    
    /**
     * Get consented financial account insights.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdAccountsAccountIdInsightsGetTest() throws ApiException {
        String consentId = null;
        String accountId = null;
        Object response = api.v1ConsentsConsentIdAccountsAccountIdInsightsGet(consentId, accountId);

        // TODO: test validations
    }
    
    /**
     * Get consented financial account transactions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdAccountsAccountIdTransactionsGetTest() throws ApiException {
        String consentId = null;
        String accountId = null;
        String filters = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        Object response = api.v1ConsentsConsentIdAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDate, toDate);

        // TODO: test validations
    }
    
    /**
     * Get all accounts in a consent.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdAccountsGetTest() throws ApiException {
        String consentId = null;
        Object response = api.v1ConsentsConsentIdAccountsGet(consentId);

        // TODO: test validations
    }
    
    /**
     * Get analysis of a consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdDocumentsDocumentIdAnalysisGetTest() throws ApiException {
        String consentId = null;
        String documentId = null;
        Object response = api.v1ConsentsConsentIdDocumentsDocumentIdAnalysisGet(consentId, documentId);

        // TODO: test validations
    }
    
    /**
     * Download a consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdDocumentsDocumentIdDownloadGetTest() throws ApiException {
        String consentId = null;
        String documentId = null;
        Object response = api.v1ConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId);

        // TODO: test validations
    }
    
    /**
     * Get consented document details.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdDocumentsDocumentIdGetTest() throws ApiException {
        String consentId = null;
        String documentId = null;
        Object response = api.v1ConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId);

        // TODO: test validations
    }
    
    /**
     * Get all documents in a consent.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdDocumentsGetTest() throws ApiException {
        String consentId = null;
        Object response = api.v1ConsentsConsentIdDocumentsGet(consentId);

        // TODO: test validations
    }
    
    /**
     * Get consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsConsentIdGetTest() throws ApiException {
        String consentId = null;
        Object response = api.v1ConsentsConsentIdGet(consentId);

        // TODO: test validations
    }
    
    /**
     * Get all consents filtered by status and time.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsGetTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Object response = api.v1ConsentsGet(status, startDate, endDate);

        // TODO: test validations
    }
    
}
