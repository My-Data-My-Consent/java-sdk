/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DataConsent;
import com.mydatamyconsent.model.DataConsentFinancialsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.FinancialAccount;
import com.mydatamyconsent.model.IndividualDataConsent;
import com.mydatamyconsent.model.IndividualDataConsentDetailsPaginatedList;
import com.mydatamyconsent.model.IndividualDataConsentDocument;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OneOfDataConsentIndividualDataConsentOrganizationDataConsent;
import com.mydatamyconsent.model.OrganizationDataConsent;
import com.mydatamyconsent.model.OrganizationDataConsentDetailsPaginatedList;
import com.mydatamyconsent.model.OrganizationDataConsentDocument;
import com.mydatamyconsent.model.OrganizationFinancialAccountDto;
import com.mydatamyconsent.model.OrganizationFinancialTransactionsDtoPaginatedList;
import java.util.UUID;
import com.mydatamyconsent.model.UserAccountFinancialTransactionsDtoPaginatedList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentsApi
 */
@Ignore
public class DataConsentsApiTest {

    private final DataConsentsApi api = new DataConsentsApi();

    
    /**
     * Get analysis of a consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadConsentedDocumentAnalysisTest() throws ApiException {
        String consentId = null;
        String documentId = null;
                api.downloadConsentedDocumentAnalysis(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Download individual consented document by document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadIndividualConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                api.downloadIndividualConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Download organization consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadOrganizationConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                api.downloadOrganizationConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get all individual consented financial accounts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentedFinancialAccountsTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.getAllConsentedFinancialAccounts(consentId);
        // TODO: test validations
    }
    
    /**
     * Get all organizational consented financial accounts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentFinancialAccountsTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.getConsentFinancialAccounts(consentId);
        // TODO: test validations
    }
    
    /**
     * Get individual consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedAccountByIdTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                FinancialAccount response = api.getConsentedAccountById(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get individual consented document by document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                IndividualDataConsentDocument response = api.getConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get organization consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                OrganizationFinancialAccountDto response = api.getConsentedFinancialAccount(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get consented financial account insights.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountInsightsTest() throws ApiException {
        String consentId = null;
        String accountId = null;
                api.getConsentedFinancialAccountInsights(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountTransactionsTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        OffsetDateTime fromDateTimeUtc = null;
        OffsetDateTime toDateTimeUtc = null;
        Integer pageNo = null;
        Integer pageSize = null;
                UserAccountFinancialTransactionsDtoPaginatedList response = api.getConsentedFinancialAccountTransactions(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get the paginated list of individual data consents.
     *
     * GetIndividualDataConsents
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime fromDateTime = null;
        OffsetDateTime toDateTime = null;
        Integer pageNo = null;
        Integer pageSize = null;
                IndividualDataConsentDetailsPaginatedList response = api.getConsents(status, fromDateTime, toDateTime, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get individual consented documents by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndividualConsentedDocumentsTest() throws ApiException {
        UUID consentId = null;
                List<IndividualDataConsentDocument> response = api.getIndividualConsentedDocuments(consentId);
        // TODO: test validations
    }
    
    /**
     * Get individuals data consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndividualDataConsentByIdTest() throws ApiException {
        UUID consentId = null;
                OneOfDataConsentIndividualDataConsentOrganizationDataConsent response = api.getIndividualDataConsentById(consentId);
        // TODO: test validations
    }
    
    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgConsentedAccountTransactionsTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        OffsetDateTime fromDateTimeUtc = null;
        OffsetDateTime toDateTimeUtc = null;
        Integer pageNo = null;
        Integer pageSize = null;
                OrganizationFinancialTransactionsDtoPaginatedList response = api.getOrgConsentedAccountTransactions(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get organization consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                OrganizationDataConsentDocument response = api.getOrganizationConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get organization consented documents by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationConsentedDocumentsTest() throws ApiException {
        UUID consentId = null;
                List<OrganizationDataConsentDocument> response = api.getOrganizationConsentedDocuments(consentId);
        // TODO: test validations
    }
    
    /**
     * Get organizations data consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationDataConsentByIdTest() throws ApiException {
        UUID consentId = null;
                OneOfDataConsentIndividualDataConsentOrganizationDataConsent response = api.getOrganizationDataConsentById(consentId);
        // TODO: test validations
    }
    
    /**
     * Get the paginated list of organization data consents.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationDataConsentsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime fromDateTime = null;
        OffsetDateTime toDateTime = null;
        Integer pageNo = null;
        Integer pageSize = null;
                OrganizationDataConsentDetailsPaginatedList response = api.getOrganizationDataConsents(status, fromDateTime, toDateTime, pageNo, pageSize);
        // TODO: test validations
    }
    
}
