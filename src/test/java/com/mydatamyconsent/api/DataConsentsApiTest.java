/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DataConsentDetailsDto;
import com.mydatamyconsent.model.DataConsentDocumentsDto;
import com.mydatamyconsent.model.DataConsentFinancialsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.FinancialAccount;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OrganizationDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.OrganizationDocumentDetailsDto;
import com.mydatamyconsent.model.OrganizationDocumentDownloadDto;
import com.mydatamyconsent.model.OrganizationFinancialAccountDto;
import com.mydatamyconsent.model.OrganizationFinancialTransactionsDtoPaginatedList;
import com.mydatamyconsent.model.ProblemDetails;
import java.util.UUID;
import com.mydatamyconsent.model.UserAccountFinancialTransactionsDtoPaginatedList;
import com.mydatamyconsent.model.UserDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.UserDocumentDetailsDto;
import com.mydatamyconsent.model.UserDocumentDownloadDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentsApi
 */
@Ignore
public class DataConsentsApiTest {

    private final DataConsentsApi api = new DataConsentsApi();

    
    /**
     * Get individual consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdAccountsAccountIdGetTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                FinancialAccount response = api.v1ConsentsIndividualsConsentIdAccountsAccountIdGet(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get consented financial account transactions of an individual based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGetTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        Integer pageNo = null;
        Integer pageSize = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
                UserAccountFinancialTransactionsDtoPaginatedList response = api.v1ConsentsIndividualsConsentIdAccountsAccountIdTransactionsGet(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate);
        // TODO: test validations
    }
    
    /**
     * Get all individual financial accounts in a consent.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdAccountsGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.v1ConsentsIndividualsConsentIdAccountsGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Download a individuals consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGetTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                UserDocumentDownloadDto response = api.v1ConsentsIndividualsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get individuals consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdDocumentsDocumentIdGetTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                UserDocumentDetailsDto response = api.v1ConsentsIndividualsConsentIdDocumentsDocumentIdGet(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get the individual documents based on ConsentId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdDocumentsGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentDocumentsDto response = api.v1ConsentsIndividualsConsentIdDocumentsGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Get individuals consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsConsentIdGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentDetailsDto response = api.v1ConsentsIndividualsConsentIdGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Get the list of Consents Sent to Individuals.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsIndividualsGetTest() throws ApiException {
        Integer pageNo = null;
        Integer pageSize = null;
        DataConsentStatus status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
                UserDataConsentInfoDtoPaginatedList response = api.v1ConsentsIndividualsGet(pageNo, pageSize, status, startDate, endDate);
        // TODO: test validations
    }
    
    /**
     * Get orgnization consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdAccountsAccountIdGetTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                OrganizationFinancialAccountDto response = api.v1ConsentsOrganizationsConsentIdAccountsAccountIdGet(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get consented financial account transactions of an organization based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGetTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        Integer pageNo = null;
        Integer pageSize = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
                OrganizationFinancialTransactionsDtoPaginatedList response = api.v1ConsentsOrganizationsConsentIdAccountsAccountIdTransactionsGet(consentId, accountId, filters, pageNo, pageSize, fromDate, toDate);
        // TODO: test validations
    }
    
    /**
     * Get all organizational financial accounts in a consent.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdAccountsGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.v1ConsentsOrganizationsConsentIdAccountsGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Download organizations consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGetTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                OrganizationDocumentDownloadDto response = api.v1ConsentsOrganizationsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get organizations consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdDocumentsDocumentIdGetTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                OrganizationDocumentDetailsDto response = api.v1ConsentsOrganizationsConsentIdDocumentsDocumentIdGet(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get the organizations documents based on ConsentId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdDocumentsGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentDocumentsDto response = api.v1ConsentsOrganizationsConsentIdDocumentsGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Get organizations consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsConsentIdGetTest() throws ApiException {
        UUID consentId = null;
                DataConsentDetailsDto response = api.v1ConsentsOrganizationsConsentIdGet(consentId);
        // TODO: test validations
    }
    
    /**
     * Get the list of data consents sent for organizations.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ConsentsOrganizationsGetTest() throws ApiException {
        Integer pageNo = null;
        Integer pageSize = null;
        DataConsentStatus status = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
                OrganizationDataConsentInfoDtoPaginatedList response = api.v1ConsentsOrganizationsGet(pageNo, pageSize, status, startDate, endDate);
        // TODO: test validations
    }
    
}
