/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DataConsentDetailsDto;
import com.mydatamyconsent.model.DataConsentDocumentsDto;
import com.mydatamyconsent.model.DataConsentFinancialsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.FinancialAccount;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OrganizationDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.OrganizationDocumentDetails;
import com.mydatamyconsent.model.OrganizationDocumentDownloadDto;
import com.mydatamyconsent.model.OrganizationFinancialAccountDto;
import com.mydatamyconsent.model.OrganizationFinancialTransactionsDtoPaginatedList;
import java.util.UUID;
import com.mydatamyconsent.model.UserAccountFinancialTransactionsDtoPaginatedList;
import com.mydatamyconsent.model.UserDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.UserDocumentDetails;
import com.mydatamyconsent.model.UserDocumentDownload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentsApi
 */
@Ignore
public class DataConsentsApiTest {

    private final DataConsentsApi api = new DataConsentsApi();

    
    /**
     * Get analysis of a consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadConsentedDocumentAnalysisTest() throws ApiException {
        String consentId = null;
        String documentId = null;
                api.downloadConsentedDocumentAnalysis(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Download a individuals consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                UserDocumentDownload response = api.downloadConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Download a organizations consented document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadOrgConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                OrganizationDocumentDownloadDto response = api.downloadOrgConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get the individual documents based on ConsentId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentedDocumentsTest() throws ApiException {
        UUID consentId = null;
                DataConsentDocumentsDto response = api.getAllConsentedDocuments(consentId);
        // TODO: test validations
    }
    
    /**
     * Get all individual consented financial accounts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentedFinancialAccountsTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.getAllConsentedFinancialAccounts(consentId);
        // TODO: test validations
    }
    
    /**
     * Get the organization documents based on ConsentId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOrganizationConsentedDocumentsTest() throws ApiException {
        UUID consentId = null;
                DataConsentDocumentsDto response = api.getAllOrganizationConsentedDocuments(consentId);
        // TODO: test validations
    }
    
    /**
     * Get all individuals consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentDetailsByIdTest() throws ApiException {
        UUID consentId = null;
                DataConsentDetailsDto response = api.getConsentDetailsById(consentId);
        // TODO: test validations
    }
    
    /**
     * Get all organizational consented financial accounts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentFinancialAccountsTest() throws ApiException {
        UUID consentId = null;
                DataConsentFinancialsDto response = api.getConsentFinancialAccounts(consentId);
        // TODO: test validations
    }
    
    /**
     * Get individual consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedAccountByIdTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                FinancialAccount response = api.getConsentedAccountById(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get individuals consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                UserDocumentDetails response = api.getConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
    /**
     * Get organization consented financial account details based on account id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
                OrganizationFinancialAccountDto response = api.getConsentedFinancialAccount(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get consented financial account insights.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountInsightsTest() throws ApiException {
        String consentId = null;
        String accountId = null;
                api.getConsentedFinancialAccountInsights(consentId, accountId);
        // TODO: test validations
    }
    
    /**
     * Get individual consented financial account transactions of an individual based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentedFinancialAccountTransactionsTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        OffsetDateTime fromDateTimeUtc = null;
        OffsetDateTime toDateTimeUtc = null;
        Integer pageNo = null;
        Integer pageSize = null;
                UserAccountFinancialTransactionsDtoPaginatedList response = api.getConsentedFinancialAccountTransactions(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get the list of data consents sent for organizations.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentsForOrganizationsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Integer pageNo = null;
        Integer pageSize = null;
                OrganizationDataConsentInfoDtoPaginatedList response = api.getConsentsForOrganizations(status, from, to, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get the list of Consents Sent to Individuals.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentsSentToIndividualsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Integer pageNo = null;
        Integer pageSize = null;
                UserDataConsentInfoDtoPaginatedList response = api.getConsentsSentToIndividuals(status, from, to, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get organization consented financial account transactions of an individual based on accountId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgConsentedAccountTransactionsTest() throws ApiException {
        UUID consentId = null;
        UUID accountId = null;
        String filters = null;
        OffsetDateTime fromDateTimeUtc = null;
        OffsetDateTime toDateTimeUtc = null;
        Integer pageNo = null;
        Integer pageSize = null;
                OrganizationFinancialTransactionsDtoPaginatedList response = api.getOrgConsentedAccountTransactions(consentId, accountId, filters, fromDateTimeUtc, toDateTimeUtc, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get all organization consent details by consent id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationConsentDetailsByIdTest() throws ApiException {
        UUID consentId = null;
                DataConsentDetailsDto response = api.getOrganizationConsentDetailsById(consentId);
        // TODO: test validations
    }
    
    /**
     * Get organization consent document based on document id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationConsentedDocumentByIdTest() throws ApiException {
        UUID consentId = null;
        UUID documentId = null;
                OrganizationDocumentDetails response = api.getOrganizationConsentedDocumentById(consentId, documentId);
        // TODO: test validations
    }
    
}
