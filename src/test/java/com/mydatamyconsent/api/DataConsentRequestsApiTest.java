/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.CreateIndividualDataConsentRequest;
import com.mydatamyconsent.model.CreateOrganizationDataConsentRequest;
import com.mydatamyconsent.model.DataConsentDetailsDto;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.IndividualDataConsentRequestResponse;
import org.threeten.bp.OffsetDateTime;
import com.mydatamyconsent.model.OrganizationDataConsentInfoDtoPaginatedList;
import com.mydatamyconsent.model.OrganizationDataConsentRequestResponse;
import com.mydatamyconsent.model.ProblemDetails;
import java.util.UUID;
import com.mydatamyconsent.model.UserDataConsentInfoDtoPaginatedList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentRequestsApi
 */
@Ignore
public class DataConsentRequestsApiTest {

    private final DataConsentRequestsApi api = new DataConsentRequestsApi();

    
    /**
     * Cancel the individual data consent request based on Id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelIndividualDataConsentRequestTest() throws ApiException {
        UUID requestId = null;
                IndividualDataConsentRequestResponse response = api.cancelIndividualDataConsentRequest(requestId);
        // TODO: test validations
    }
    
    /**
     * Cancel the Organization data consent request based on Id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelOrganizationDataConsentRequestTest() throws ApiException {
        UUID requestId = null;
                OrganizationDataConsentRequestResponse response = api.cancelOrganizationDataConsentRequest(requestId);
        // TODO: test validations
    }
    
    /**
     * Create a individual data consent request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIndividualDataConsentRequestTest() throws ApiException {
        CreateIndividualDataConsentRequest createIndividualDataConsentRequest = null;
                IndividualDataConsentRequestResponse response = api.createIndividualDataConsentRequest(createIndividualDataConsentRequest);
        // TODO: test validations
    }
    
    /**
     * Create a organization data consent request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrganizationDataConsentRequestTest() throws ApiException {
        CreateOrganizationDataConsentRequest createOrganizationDataConsentRequest = null;
                OrganizationDataConsentRequestResponse response = api.createOrganizationDataConsentRequest(createOrganizationDataConsentRequest);
        // TODO: test validations
    }
    
    /**
     * Get all Consent Requests sent to Individuals.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentRequestsToIndividualsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        Integer pageNo = null;
        Integer pageSize = null;
                UserDataConsentInfoDtoPaginatedList response = api.getAllConsentRequestsToIndividuals(status, startDateTime, endDateTime, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get All Consent Requests sent to Organizations.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentRequestsToOrganizationsTest() throws ApiException {
        DataConsentStatus status = null;
        OffsetDateTime startDateTime = null;
        OffsetDateTime endDateTime = null;
        Integer pageNo = null;
        Integer pageSize = null;
                OrganizationDataConsentInfoDtoPaginatedList response = api.getAllConsentRequestsToOrganizations(status, startDateTime, endDateTime, pageNo, pageSize);
        // TODO: test validations
    }
    
    /**
     * Get a Consent Request by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndividualConsentRequestByIdTest() throws ApiException {
        UUID requestId = null;
                DataConsentDetailsDto response = api.getIndividualConsentRequestById(requestId);
        // TODO: test validations
    }
    
    /**
     * Get a OrganizationConsent Request by Id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationConsentRequestByIdTest() throws ApiException {
        UUID requestId = null;
                DataConsentDetailsDto response = api.getOrganizationConsentRequestById(requestId);
        // TODO: test validations
    }
    
}
