/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.api;

import com.mydatamyconsent.ApiException;
import com.mydatamyconsent.model.DataConsent;
import com.mydatamyconsent.model.DataConsentDetailsDto;
import com.mydatamyconsent.model.DataConsentRequestModel;
import com.mydatamyconsent.model.DataConsentStatus;
import com.mydatamyconsent.model.ProblemDetails;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataConsentRequestsApi
 */
@Ignore
public class DataConsentRequestsApiTest {

    private final DataConsentRequestsApi api = new DataConsentRequestsApi();

    
    /**
     * Cancel a Consent Request by ID.
     *
     * .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelConsentRequestTest() throws ApiException {
        UUID requestId = null;
        api.cancelConsentRequest(requestId);

        // TODO: test validations
    }
    
    /**
     * Create a consent request.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRequestTest() throws ApiException {
        DataConsentRequestModel dataConsentRequestModel = null;
        DataConsent response = api.createRequest(dataConsentRequestModel);

        // TODO: test validations
    }
    
    /**
     * Get all Consent Requests.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsentRequestsTest() throws ApiException {
        DataConsentStatus status = null;
        Object response = api.getAllConsentRequests(status);

        // TODO: test validations
    }
    
    /**
     * Get a Consent Request by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentRequestByIdTest() throws ApiException {
        UUID requestId = null;
        DataConsentDetailsDto response = api.getConsentRequestById(requestId);

        // TODO: test validations
    }
    
}
