/*
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.MutualFundFundType;
import com.mydatamyconsent.model.MutualFundHoldingMode;
import com.mydatamyconsent.model.MutualFundSchemeCategory;
import com.mydatamyconsent.model.MutualFundSchemeOption;
import com.mydatamyconsent.model.MutualFundSchemePlan;
import com.mydatamyconsent.model.MutualFundSchemeType;
import com.mydatamyconsent.model.MutualFundTransactionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for FinancialAccountTransactionMutualFundTransaction
 */
public class FinancialAccountTransactionMutualFundTransactionTest {
    private final FinancialAccountTransactionMutualFundTransaction model = new FinancialAccountTransactionMutualFundTransaction();

    /**
     * Model tests for FinancialAccountTransactionMutualFundTransaction
     */
    @Test
    public void testFinancialAccountTransactionMutualFundTransaction() {
        // TODO: test FinancialAccountTransactionMutualFundTransaction
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'amc'
     */
    @Test
    public void amcTest() {
        // TODO: test amc
    }

    /**
     * Test the property 'registrar'
     */
    @Test
    public void registrarTest() {
        // TODO: test registrar
    }

    /**
     * Test the property 'schemeCode'
     */
    @Test
    public void schemeCodeTest() {
        // TODO: test schemeCode
    }

    /**
     * Test the property 'schemePlan'
     */
    @Test
    public void schemePlanTest() {
        // TODO: test schemePlan
    }

    /**
     * Test the property 'isin'
     */
    @Test
    public void isinTest() {
        // TODO: test isin
    }

    /**
     * Test the property 'amfiCode'
     */
    @Test
    public void amfiCodeTest() {
        // TODO: test amfiCode
    }

    /**
     * Test the property 'fundType'
     */
    @Test
    public void fundTypeTest() {
        // TODO: test fundType
    }

    /**
     * Test the property 'schemeOption'
     */
    @Test
    public void schemeOptionTest() {
        // TODO: test schemeOption
    }

    /**
     * Test the property 'schemeTypes'
     */
    @Test
    public void schemeTypesTest() {
        // TODO: test schemeTypes
    }

    /**
     * Test the property 'schemeCategory'
     */
    @Test
    public void schemeCategoryTest() {
        // TODO: test schemeCategory
    }

    /**
     * Test the property 'ucc'
     */
    @Test
    public void uccTest() {
        // TODO: test ucc
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'closingUnits'
     */
    @Test
    public void closingUnitsTest() {
        // TODO: test closingUnits
    }

    /**
     * Test the property 'lienUnits'
     */
    @Test
    public void lienUnitsTest() {
        // TODO: test lienUnits
    }

    /**
     * Test the property 'nav'
     */
    @Test
    public void navTest() {
        // TODO: test nav
    }

    /**
     * Test the property 'navDate'
     */
    @Test
    public void navDateTest() {
        // TODO: test navDate
    }

    /**
     * Test the property 'orderDate'
     */
    @Test
    public void orderDateTest() {
        // TODO: test orderDate
    }

    /**
     * Test the property 'executionDate'
     */
    @Test
    public void executionDateTest() {
        // TODO: test executionDate
    }

    /**
     * Test the property 'lockinFlag'
     */
    @Test
    public void lockinFlagTest() {
        // TODO: test lockinFlag
    }

    /**
     * Test the property 'lockinDays'
     */
    @Test
    public void lockinDaysTest() {
        // TODO: test lockinDays
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        // TODO: test mode
    }

    /**
     * Test the property 'narration'
     */
    @Test
    public void narrationTest() {
        // TODO: test narration
    }

}
