/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.ApplicationUser;
import com.mydatamyconsent.model.Organization;
import com.mydatamyconsent.model.Rejection;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for OrganizationKyoDocument
 */
public class OrganizationKyoDocumentTest {
    private final OrganizationKyoDocument model = new OrganizationKyoDocument();

    /**
     * Model tests for OrganizationKyoDocument
     */
    @Test
    public void testOrganizationKyoDocument() {
        // TODO: test OrganizationKyoDocument
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'organizationId'
     */
    @Test
    public void organizationIdTest() {
        // TODO: test organizationId
    }

    /**
     * Test the property 'documentName'
     */
    @Test
    public void documentNameTest() {
        // TODO: test documentName
    }

    /**
     * Test the property 'storageUrl'
     */
    @Test
    public void storageUrlTest() {
        // TODO: test storageUrl
    }

    /**
     * Test the property 'uploadedAtUtc'
     */
    @Test
    public void uploadedAtUtcTest() {
        // TODO: test uploadedAtUtc
    }

    /**
     * Test the property 'verifiedBy'
     */
    @Test
    public void verifiedByTest() {
        // TODO: test verifiedBy
    }

    /**
     * Test the property 'verifiedAtUtc'
     */
    @Test
    public void verifiedAtUtcTest() {
        // TODO: test verifiedAtUtc
    }

    /**
     * Test the property 'deletedBy'
     */
    @Test
    public void deletedByTest() {
        // TODO: test deletedBy
    }

    /**
     * Test the property 'deletedAtUtc'
     */
    @Test
    public void deletedAtUtcTest() {
        // TODO: test deletedAtUtc
    }

    /**
     * Test the property 'organization'
     */
    @Test
    public void organizationTest() {
        // TODO: test organization
    }

    /**
     * Test the property 'verifiedByUser'
     */
    @Test
    public void verifiedByUserTest() {
        // TODO: test verifiedByUser
    }

    /**
     * Test the property 'deletedByUser'
     */
    @Test
    public void deletedByUserTest() {
        // TODO: test deletedByUser
    }

    /**
     * Test the property 'rejection'
     */
    @Test
    public void rejectionTest() {
        // TODO: test rejection
    }

}
