/*
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.DocumentCategoryType;
import com.mydatamyconsent.model.DocumentSubCategoryType;
import com.mydatamyconsent.model.SupportedEntityType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for DocumentType
 */
public class DocumentTypeTest {
    private final DocumentType model = new DocumentType();

    /**
     * Model tests for DocumentType
     */
    @Test
    public void testDocumentType() {
        // TODO: test DocumentType
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'categoryType'
     */
    @Test
    public void categoryTypeTest() {
        // TODO: test categoryType
    }

    /**
     * Test the property 'subCategoryType'
     */
    @Test
    public void subCategoryTypeTest() {
        // TODO: test subCategoryType
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'slug'
     */
    @Test
    public void slugTest() {
        // TODO: test slug
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'logoUrl'
     */
    @Test
    public void logoUrlTest() {
        // TODO: test logoUrl
    }

    /**
     * Test the property 'searchServiceName'
     */
    @Test
    public void searchServiceNameTest() {
        // TODO: test searchServiceName
    }

    /**
     * Test the property 'repositoryServiceName'
     */
    @Test
    public void repositoryServiceNameTest() {
        // TODO: test repositoryServiceName
    }

    /**
     * Test the property 'supportedEntityTypes'
     */
    @Test
    public void supportedEntityTypesTest() {
        // TODO: test supportedEntityTypes
    }

    /**
     * Test the property 'addedBy'
     */
    @Test
    public void addedByTest() {
        // TODO: test addedBy
    }

    /**
     * Test the property 'payableAmount'
     */
    @Test
    public void payableAmountTest() {
        // TODO: test payableAmount
    }

    /**
     * Test the property 'payableAmountCurrency'
     */
    @Test
    public void payableAmountCurrencyTest() {
        // TODO: test payableAmountCurrency
    }

    /**
     * Test the property 'approvedAtUtc'
     */
    @Test
    public void approvedAtUtcTest() {
        // TODO: test approvedAtUtc
    }

}
