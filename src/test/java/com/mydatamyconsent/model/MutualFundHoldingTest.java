/*
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.MutualFundHoldingMode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for MutualFundHolding
 */
public class MutualFundHoldingTest {
    private final MutualFundHolding model = new MutualFundHolding();

    /**
     * Model tests for MutualFundHolding
     */
    @Test
    public void testMutualFundHolding() {
        // TODO: test MutualFundHolding
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'amc'
     */
    @Test
    public void amcTest() {
        // TODO: test amc
    }

    /**
     * Test the property 'registrar'
     */
    @Test
    public void registrarTest() {
        // TODO: test registrar
    }

    /**
     * Test the property 'schemeCode'
     */
    @Test
    public void schemeCodeTest() {
        // TODO: test schemeCode
    }

    /**
     * Test the property 'isin'
     */
    @Test
    public void isinTest() {
        // TODO: test isin
    }

    /**
     * Test the property 'ucc'
     */
    @Test
    public void uccTest() {
        // TODO: test ucc
    }

    /**
     * Test the property 'amfiCode'
     */
    @Test
    public void amfiCodeTest() {
        // TODO: test amfiCode
    }

    /**
     * Test the property 'folioNo'
     */
    @Test
    public void folioNoTest() {
        // TODO: test folioNo
    }

    /**
     * Test the property 'dividendType'
     */
    @Test
    public void dividendTypeTest() {
        // TODO: test dividendType
    }

    /**
     * Test the property 'fatcaStatus'
     */
    @Test
    public void fatcaStatusTest() {
        // TODO: test fatcaStatus
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        // TODO: test mode
    }

    /**
     * Test the property 'units'
     */
    @Test
    public void unitsTest() {
        // TODO: test units
    }

    /**
     * Test the property 'closingUnits'
     */
    @Test
    public void closingUnitsTest() {
        // TODO: test closingUnits
    }

    /**
     * Test the property 'lienUnits'
     */
    @Test
    public void lienUnitsTest() {
        // TODO: test lienUnits
    }

    /**
     * Test the property 'rate'
     */
    @Test
    public void rateTest() {
        // TODO: test rate
    }

    /**
     * Test the property 'nav'
     */
    @Test
    public void navTest() {
        // TODO: test nav
    }

    /**
     * Test the property 'lockingUnits'
     */
    @Test
    public void lockingUnitsTest() {
        // TODO: test lockingUnits
    }

}
