/*
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mydatamyconsent.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mydatamyconsent.model.Holder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for MutualFund
 */
public class MutualFundTest {
    private final MutualFund model = new MutualFund();

    /**
     * Model tests for MutualFund
     */
    @Test
    public void testMutualFund() {
        // TODO: test MutualFund
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'investmentValue'
     */
    @Test
    public void investmentValueTest() {
        // TODO: test investmentValue
    }

    /**
     * Test the property 'currentValue'
     */
    @Test
    public void currentValueTest() {
        // TODO: test currentValue
    }

    /**
     * Test the property 'currencyCode'
     */
    @Test
    public void currencyCodeTest() {
        // TODO: test currencyCode
    }

    /**
     * Test the property 'amc'
     */
    @Test
    public void amcTest() {
        // TODO: test amc
    }

    /**
     * Test the property 'registrar'
     */
    @Test
    public void registrarTest() {
        // TODO: test registrar
    }

    /**
     * Test the property 'fundName'
     */
    @Test
    public void fundNameTest() {
        // TODO: test fundName
    }

    /**
     * Test the property 'isin'
     */
    @Test
    public void isinTest() {
        // TODO: test isin
    }

    /**
     * Test the property 'folioNumber'
     */
    @Test
    public void folioNumberTest() {
        // TODO: test folioNumber
    }

    /**
     * Test the property 'schemeCode'
     */
    @Test
    public void schemeCodeTest() {
        // TODO: test schemeCode
    }

    /**
     * Test the property 'fundType'
     */
    @Test
    public void fundTypeTest() {
        // TODO: test fundType
    }

    /**
     * Test the property 'fundCategory'
     */
    @Test
    public void fundCategoryTest() {
        // TODO: test fundCategory
    }

    /**
     * Test the property 'units'
     */
    @Test
    public void unitsTest() {
        // TODO: test units
    }

    /**
     * Test the property 'lienUnits'
     */
    @Test
    public void lienUnitsTest() {
        // TODO: test lienUnits
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'holder'
     */
    @Test
    public void holderTest() {
        // TODO: test holder
    }

    /**
     * Test the property 'transactions'
     */
    @Test
    public void transactionsTest() {
        // TODO: test transactions
    }

}
